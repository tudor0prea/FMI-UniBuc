LAB 1 FLP


miniHaskell> let squareSum = \x -> \y -> + (* x x) (* y y) in squareSum 2 3
13

miniHaskell> letrec revRange = \n -> if (isZero n) [] (++ [pred n] (revRange (pred n)) ) in let range = \n -> reverse (revRange n) in range 6
[0, 1, 2, 3, 4, 5]

miniHaskell> let justList = \n -> map (fromMaybe 0) (filter (isJust) n)  in justList [Just 1, Nothing, Just 3]
[1, 3]

miniHaskell> let all = \predicat -> \list -> (foldl && True (map predicat list)) in all isZero [0, 0, 0]
True
miniHaskell> let all = \predicat -> \list -> (foldl && True (map predicat list)) in all isZero [0, 0, 10]
False
